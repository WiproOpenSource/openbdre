/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.wipro.ats.bdre.imcrawler.mr;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Contents extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contents\",\"namespace\":\"com.wipro.ats.bdre.imcrawler.mr\",\"fields\":[{\"name\":\"docid\",\"type\":\"int\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"path\",\"type\":\"string\"},{\"name\":\"subDomain\",\"type\":\"string\"},{\"name\":\"parentUrl\",\"type\":\"string\"},{\"name\":\"anchor\",\"type\":\"string\"},{\"name\":\"html\",\"type\":\"string\"},{\"name\":\"binary\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int docid;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence domain;
  @Deprecated public java.lang.CharSequence path;
  @Deprecated public java.lang.CharSequence subDomain;
  @Deprecated public java.lang.CharSequence parentUrl;
  @Deprecated public java.lang.CharSequence anchor;
  @Deprecated public java.lang.CharSequence html;
  @Deprecated public java.util.List<java.nio.ByteBuffer> binary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Contents() {}

  /**
   * All-args constructor.
   */
  public Contents(java.lang.Integer docid, java.lang.CharSequence url, java.lang.CharSequence domain, java.lang.CharSequence path, java.lang.CharSequence subDomain, java.lang.CharSequence parentUrl, java.lang.CharSequence anchor, java.lang.CharSequence html, java.util.List<java.nio.ByteBuffer> binary) {
    this.docid = docid;
    this.url = url;
    this.domain = domain;
    this.path = path;
    this.subDomain = subDomain;
    this.parentUrl = parentUrl;
    this.anchor = anchor;
    this.html = html;
    this.binary = binary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return docid;
    case 1: return url;
    case 2: return domain;
    case 3: return path;
    case 4: return subDomain;
    case 5: return parentUrl;
    case 6: return anchor;
    case 7: return html;
    case 8: return binary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: docid = (java.lang.Integer)value$; break;
    case 1: url = (java.lang.CharSequence)value$; break;
    case 2: domain = (java.lang.CharSequence)value$; break;
    case 3: path = (java.lang.CharSequence)value$; break;
    case 4: subDomain = (java.lang.CharSequence)value$; break;
    case 5: parentUrl = (java.lang.CharSequence)value$; break;
    case 6: anchor = (java.lang.CharSequence)value$; break;
    case 7: html = (java.lang.CharSequence)value$; break;
    case 8: binary = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'docid' field.
   */
  public java.lang.Integer getDocid() {
    return docid;
  }

  /**
   * Sets the value of the 'docid' field.
   * @param value the value to set.
   */
  public void setDocid(java.lang.Integer value) {
    this.docid = value;
  }

  /**
   * Gets the value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'domain' field.
   */
  public java.lang.CharSequence getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.CharSequence value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'path' field.
   */
  public java.lang.CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'subDomain' field.
   */
  public java.lang.CharSequence getSubDomain() {
    return subDomain;
  }

  /**
   * Sets the value of the 'subDomain' field.
   * @param value the value to set.
   */
  public void setSubDomain(java.lang.CharSequence value) {
    this.subDomain = value;
  }

  /**
   * Gets the value of the 'parentUrl' field.
   */
  public java.lang.CharSequence getParentUrl() {
    return parentUrl;
  }

  /**
   * Sets the value of the 'parentUrl' field.
   * @param value the value to set.
   */
  public void setParentUrl(java.lang.CharSequence value) {
    this.parentUrl = value;
  }

  /**
   * Gets the value of the 'anchor' field.
   */
  public java.lang.CharSequence getAnchor() {
    return anchor;
  }

  /**
   * Sets the value of the 'anchor' field.
   * @param value the value to set.
   */
  public void setAnchor(java.lang.CharSequence value) {
    this.anchor = value;
  }

  /**
   * Gets the value of the 'html' field.
   */
  public java.lang.CharSequence getHtml() {
    return html;
  }

  /**
   * Sets the value of the 'html' field.
   * @param value the value to set.
   */
  public void setHtml(java.lang.CharSequence value) {
    this.html = value;
  }

  /**
   * Gets the value of the 'binary' field.
   */
  public java.util.List<java.nio.ByteBuffer> getBinary() {
    return binary;
  }

  /**
   * Sets the value of the 'binary' field.
   * @param value the value to set.
   */
  public void setBinary(java.util.List<java.nio.ByteBuffer> value) {
    this.binary = value;
  }

  /** Creates a new Contents RecordBuilder */
  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder() {
    return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder();
  }
  
  /** Creates a new Contents RecordBuilder by copying an existing Builder */
  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder(com.wipro.ats.bdre.imcrawler.mr.Contents.Builder other) {
    return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder(other);
  }
  
  /** Creates a new Contents RecordBuilder by copying an existing Contents instance */
  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder(com.wipro.ats.bdre.imcrawler.mr.Contents other) {
    return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder(other);
  }
  
  /**
   * RecordBuilder for Contents instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contents>
    implements org.apache.avro.data.RecordBuilder<Contents> {

    private int docid;
    private java.lang.CharSequence url;
    private java.lang.CharSequence domain;
    private java.lang.CharSequence path;
    private java.lang.CharSequence subDomain;
    private java.lang.CharSequence parentUrl;
    private java.lang.CharSequence anchor;
    private java.lang.CharSequence html;
    private java.util.List<java.nio.ByteBuffer> binary;

    /** Creates a new Builder */
    private Builder() {
      super(com.wipro.ats.bdre.imcrawler.mr.Contents.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.wipro.ats.bdre.imcrawler.mr.Contents.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.docid)) {
        this.docid = data().deepCopy(fields()[0].schema(), other.docid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.domain)) {
        this.domain = data().deepCopy(fields()[2].schema(), other.domain);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.path)) {
        this.path = data().deepCopy(fields()[3].schema(), other.path);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subDomain)) {
        this.subDomain = data().deepCopy(fields()[4].schema(), other.subDomain);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentUrl)) {
        this.parentUrl = data().deepCopy(fields()[5].schema(), other.parentUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.anchor)) {
        this.anchor = data().deepCopy(fields()[6].schema(), other.anchor);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.html)) {
        this.html = data().deepCopy(fields()[7].schema(), other.html);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.binary)) {
        this.binary = data().deepCopy(fields()[8].schema(), other.binary);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Contents instance */
    private Builder(com.wipro.ats.bdre.imcrawler.mr.Contents other) {
            super(com.wipro.ats.bdre.imcrawler.mr.Contents.SCHEMA$);
      if (isValidValue(fields()[0], other.docid)) {
        this.docid = data().deepCopy(fields()[0].schema(), other.docid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.domain)) {
        this.domain = data().deepCopy(fields()[2].schema(), other.domain);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.path)) {
        this.path = data().deepCopy(fields()[3].schema(), other.path);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subDomain)) {
        this.subDomain = data().deepCopy(fields()[4].schema(), other.subDomain);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentUrl)) {
        this.parentUrl = data().deepCopy(fields()[5].schema(), other.parentUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.anchor)) {
        this.anchor = data().deepCopy(fields()[6].schema(), other.anchor);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.html)) {
        this.html = data().deepCopy(fields()[7].schema(), other.html);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.binary)) {
        this.binary = data().deepCopy(fields()[8].schema(), other.binary);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'docid' field */
    public java.lang.Integer getDocid() {
      return docid;
    }
    
    /** Sets the value of the 'docid' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setDocid(int value) {
      validate(fields()[0], value);
      this.docid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'docid' field has been set */
    public boolean hasDocid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'docid' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearDocid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'url' field */
    public java.lang.CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'url' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'domain' field */
    public java.lang.CharSequence getDomain() {
      return domain;
    }
    
    /** Sets the value of the 'domain' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setDomain(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.domain = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'domain' field has been set */
    public boolean hasDomain() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'domain' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'path' field */
    public java.lang.CharSequence getPath() {
      return path;
    }
    
    /** Sets the value of the 'path' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.path = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'path' field has been set */
    public boolean hasPath() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'path' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearPath() {
      path = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'subDomain' field */
    public java.lang.CharSequence getSubDomain() {
      return subDomain;
    }
    
    /** Sets the value of the 'subDomain' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setSubDomain(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.subDomain = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'subDomain' field has been set */
    public boolean hasSubDomain() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'subDomain' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearSubDomain() {
      subDomain = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'parentUrl' field */
    public java.lang.CharSequence getParentUrl() {
      return parentUrl;
    }
    
    /** Sets the value of the 'parentUrl' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setParentUrl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.parentUrl = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'parentUrl' field has been set */
    public boolean hasParentUrl() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'parentUrl' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearParentUrl() {
      parentUrl = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'anchor' field */
    public java.lang.CharSequence getAnchor() {
      return anchor;
    }
    
    /** Sets the value of the 'anchor' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setAnchor(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.anchor = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'anchor' field has been set */
    public boolean hasAnchor() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'anchor' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearAnchor() {
      anchor = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'html' field */
    public java.lang.CharSequence getHtml() {
      return html;
    }
    
    /** Sets the value of the 'html' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setHtml(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.html = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'html' field has been set */
    public boolean hasHtml() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'html' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearHtml() {
      html = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'binary' field */
    public java.util.List<java.nio.ByteBuffer> getBinary() {
      return binary;
    }
    
    /** Sets the value of the 'binary' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder setBinary(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[8], value);
      this.binary = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'binary' field has been set */
    public boolean hasBinary() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'binary' field */
    public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearBinary() {
      binary = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public Contents build() {
      try {
        Contents record = new Contents();
        record.docid = fieldSetFlags()[0] ? this.docid : (java.lang.Integer) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.domain = fieldSetFlags()[2] ? this.domain : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.path = fieldSetFlags()[3] ? this.path : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.subDomain = fieldSetFlags()[4] ? this.subDomain : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.parentUrl = fieldSetFlags()[5] ? this.parentUrl : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.anchor = fieldSetFlags()[6] ? this.anchor : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.html = fieldSetFlags()[7] ? this.html : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.binary = fieldSetFlags()[8] ? this.binary : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
